?solve
c=rbind(c(1, -1/4), c(-1/4, 1))
c
solve(c)
solve(c) %*% c
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(x) {
inv <<- solve(x)
}
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
t1 <- makeCacheMatrix(x=matrix(1:4,2,2))
t1
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
v1 <- makeVector(1:4)
v1
v1$setmean()
v1 <- makeVector(x = numeric(1:4))
v1
v1 <- makeVector(numeric(1:4))
v1
v1$setmean()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(x) m <<- mean(x)
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
v1 <- makeVector(numeric(1:4))
v1
t1
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
?numeric
v1 <- makeVector(x=c(1:4))
v2 <- cachemean(x)
v2 <- cachemean(v1)
v2
v2 <- cachemean(v1)
v2
?is.null
?!
## makeCacheMatrix: This function creates a special "matrix"
## object that can cache its inverse.
## makeCacheMatrix include a list of functions:
## 1. set the value of the matrix
## 2. get the value of the matrix
## 3. calculate the inverse of the matrix
## 4. get the value of the inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(solve) inv <<- solve
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve: This function computes the inverse of the
## special "matrix" returned by makeCacheMatrix above.
## 1. Check if the inverse has already been calculated (and the matrix
## has not changed), then the cachesolve should retrieve the
## inverse from the cache.
## 2. Otherwise, it calulates the inverse of the matrix
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
m1 <- makeCacheMatrix(matrix(1:4,2,2))
cacheSolve(m1)
cacheSolve(m1)
cacheSolve(m1)
source('/Volumes/Data/Data science - Tu/Coursera/ProgrammingAssignment2/cachematrix.R')
m1 <- makeCacheMatrix(matrix(1:4,2,2))
cacheSolve(m1)
cacheSolve(m1)
source('/Volumes/Data/Data science - Tu/Coursera/ProgrammingAssignment2/cachematrix.R')
m2 <- makeCacheMatrix(matrix(2:5,2,2))
cacheSolve(m2)
cacheSolve(m2)
cacheSolve(m2)
cacheSolve(m2)
cacheSolve(m2)
cacheSolve(m1)
cacheSolve(m1)
cacheSolve(m1)
cacheSolve(m1)
solve(matrix(1:4, 2,2))
mea <- function(mean)
mea <- function(mean) x <- mean
mea(1:4)
M1 <- mea(c(1:4))
M1
